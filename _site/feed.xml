

<feed xmlns="http://www.w3.org/2005/Atom">
  <id>http://localhost:4000/</id>
  <title>JunStiN</title>
  <subtitle>A minimal, responsive and feature-rich Jekyll theme for technical writing.</subtitle>
  <updated>2023-12-19T20:24:36+09:00</updated>
  <author>
    <name>JunStiN</name>
    <uri>http://localhost:4000/</uri>
  </author>
  <link rel="self" type="application/atom+xml" href="http://localhost:4000/feed.xml"/>
  <link rel="alternate" type="text/html" hreflang="en"
    href="http://localhost:4000/"/>
  <generator uri="https://jekyllrb.com/" version="4.3.2">Jekyll</generator>
  <rights> © 2023 JunStiN </rights>
  <icon>/assets/img/favicons/favicon.ico</icon>
  <logo>/assets/img/favicons/favicon-96x96.png</logo>


  
  <entry>
    <title>네트워크1 - google.com</title>
    <link href="http://localhost:4000/posts/network01/" rel="alternate" type="text/html" title="네트워크1 - google.com" />
    <published>2023-12-19T19:37:00+09:00</published>
  
    <updated>2023-12-19T20:20:47+09:00</updated>
  
    <id>http://localhost:4000/posts/network01/</id>
    <content src="http://localhost:4000/posts/network01/" />
    <author>
      <name>JunStiN</name>
    </author>

  
    
    <category term="개발" />
    
    <category term="네트워크" />
    
  

  
    <summary>
      





      

웹브라우저에 www.google.com 을 치면 무슨 일이 일어나는가?



구글 서버의 80포트로 htttp req메시지를 보내는것.
해당 요청을 인터넷을 통해 구글에 요청하기위해 패킷을 만들어야함.

ㅁ응용계층: http, dns, smtp 등 
=&amp;gt; HTTP 요청

ㅁ전송계층
TCP로 연결

  SP 시작포트번호: 내컴퓨터 포트번호
  DP 목적지포트번호: www.google.com 은 80포트로 알고있음.




ㅁ인터넷계층

  SA 시작아이피주소: 내 시작주소는 당연히 알고있음
  DA 목적지아이피주소: 도메인정보만 알고있음. -&amp;gt;  DNS프로토콜을 통해 알아낼수있음.
  브라우저는 OS에게 www.google.com에 대한 IP주소를 알고 싶다고 요청함. -&amp;gt; OS에서 ...
    </summary>
  

  </entry>

  
  <entry>
    <title>한화시스템 BEYOND 캠프 3기 5주차 회고</title>
    <link href="http://localhost:4000/posts/week5/" rel="alternate" type="text/html" title="한화시스템 BEYOND 캠프 3기 5주차 회고" />
    <published>2023-12-17T23:37:00+09:00</published>
  
    <updated>2023-12-18T04:28:21+09:00</updated>
  
    <id>http://localhost:4000/posts/week5/</id>
    <content src="http://localhost:4000/posts/week5/" />
    <author>
      <name>JunStiN</name>
    </author>

  
    
    <category term="한화시스템" />
    
    <category term="주차회고" />
    
  

  
    <summary>
      





      

한화시스템 BEYOND 캠프 3기 5주차 회고




내용



(벌써 시작한지 한달이다)



1. 전반적인 느낀 점 (일주일 동안 한 일)



이번 한 주는 자바라는 언어와 친해지는 한 주였다.

자바가 처음이라서인지 손에 잘 잡히지않아서 무언가를 좀 해보려하는데, 일단 되는게 없다. 
(근데 또 뭔가를 붙여서 어거지로 되게 한다)

그리고 수업은 자바의 핵심이라고 할 수 있는 
컬렉션과 객체지향의 꽃인 클래스가 진행이 되었는데 
내가 할 수 있는건 아무것도 없었다.




그래서 앞으로는 자바와 친해지기로 정했다.
그런데 이 친구 참 어렵다.

컬렉션을 배우는 주간이라서 컬렉션에 대해 이해를 해보려했지만 참 이해하기 어렵다.
그리고 이번주 수업동안 가장 큰 충격은 무엇보다 자바에서는
컬렉션에...
    </summary>
  

  </entry>

  
  <entry>
    <title>자바 Thread_15</title>
    <link href="http://localhost:4000/posts/Java-Thread15/" rel="alternate" type="text/html" title="자바 Thread_15" />
    <published>2023-12-15T16:09:22+09:00</published>
  
    <updated>2023-12-15T16:09:22+09:00</updated>
  
    <id>http://localhost:4000/posts/Java-Thread15/</id>
    <content src="http://localhost:4000/posts/Java-Thread15/" />
    <author>
      <name>JunStiN</name>
    </author>

  
    
    <category term="자바" />
    
    <category term="멀티스레딩" />
    
  

  
    <summary>
      





      

가상 스레드




  시작 메서드를 실행하면 애플리케이션에 새로운 OS스레드를 만들어달라고 OS에 요청함
  이후 JVM에 요청해 정해진 크기의 스택 공간을 할당받아 스레드와 로컬변수를 저장함 
=&amp;gt; OS는 CPU 스레드 스케줄링과 실행에 전적인 책임이 있음, JVM내부의 스레드는 얕은 계층, 혹은 운영체제 스레드를 감싸고 있는 것에 불과 (자바 스레드 == 플랫폼 스레드)





  자바 플랫폼 스레드는 기본적으로 무거움(비용이 큼)
그리고 OS스레드와 1:1 매칭된다(OS스레드가 JVM의 정적 공간에 묶여있음)
—
—


가상스레드는 JDK 21이상부터 사용가능

  가상 스레드는 다른 스레드와 달리 우리가 동시에 실행하고 메서드를 시작할 코드를 가지고 있어야함
  하지만 플랫폼 스레드...
    </summary>
  

  </entry>

  
  <entry>
    <title>자바 Thread_14</title>
    <link href="http://localhost:4000/posts/Java-Thread14/" rel="alternate" type="text/html" title="자바 Thread_14" />
    <published>2023-12-15T16:09:22+09:00</published>
  
    <updated>2023-12-15T16:09:22+09:00</updated>
  
    <id>http://localhost:4000/posts/Java-Thread14/</id>
    <content src="http://localhost:4000/posts/Java-Thread14/" />
    <author>
      <name>JunStiN</name>
    </author>

  
    
    <category term="자바" />
    
    <category term="멀티스레딩" />
    
  

  
    <summary>
      





      

논-블로킹

자바 스레드12 ~ 13의 내용와 이어지는 내용으로 
꼭 두 개의 글을 같이 봐야함




  논블로킹을 호출하면 해당 메서드는 차단되지않음
  바로 반환하기때문에 스레드가 다음 작업을 할 수 있음
(결과를 인자로 받는 콜백 함수)





  요청을 처리하는 스레드가 차단되지않았기에 코어보다 많은 스레드를 생성할 필요가 없음
  CPU를 쉴틈없이 사용중이니 컨텍스트 스위치도 없음
  그러면 스레드를 더 생성할 이유는 코어가 더 많아서 병렬처리할떄임
  논블로킹IO 사용시 코어수 == 스레드수 모델 가능함(CPU 연산을 수행하는 프로세스에 최적의 성능을 뽑아낼 수 있음)





  단점은 코드 가독성이 블로킹IO에 비해 너무 안좋고 적용하는 코드의 레벨이 너무 높음 (매우 어려움)
 ...
    </summary>
  

  </entry>

  
  <entry>
    <title>자바 Thread_13</title>
    <link href="http://localhost:4000/posts/Java-Thread13/" rel="alternate" type="text/html" title="자바 Thread_13" />
    <published>2023-12-15T12:09:22+09:00</published>
  
    <updated>2023-12-15T12:09:22+09:00</updated>
  
    <id>http://localhost:4000/posts/Java-Thread13/</id>
    <content src="http://localhost:4000/posts/Java-Thread13/" />
    <author>
      <name>JunStiN</name>
    </author>

  
    
    <category term="자바" />
    
    <category term="멀티스레딩" />
    
  

  
    <summary>
      





      

작업당 스레드 / 요청당 스레드

자바 스레드12의 내용와 이어지는 내용으로 
꼭 두 개의 글을 같이 봐야함


// 실행할 작업의 수
private static final int NUMBER_OF_TASK = 1000;

    public static void main(String[] args) {
        System.out.println("Enter to start");
        Scanner sc = new Scanner(System.in);
        sc.nextLine();

        long start = System.currentTimeMillis();
        performTask();
        System.out.println("task from ...
    </summary>
  

  </entry>

</feed>


